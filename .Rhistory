tidyr::unite('conf.interval', dplyr::matches('conf'), sep = ',') %>%
dplyr::mutate(
p.value = '.000',
conf.interval = paste0('[', .data$conf.interval, ']')
)
}) %>%
dplyr::bind_rows()
results
# execute t-tests
test_a <- t.test(number_of_cases ~ above_mean, data = ttests)
test_b <- t.test(number_of_cases ~ above_median, data = ttests)
# create two tables containing the information from the t-tests
results <- list(test_a, test_b) %>%
lapply(function(x){
x %>%
broom::tidy() %>%
dplyr::select(-matches('method|alternative')) %>%
dplyr::mutate(p.value = round(.data$p.value, 3)) %>%
dplyr::mutate_all(as.integer) %>%
dplyr::mutate_all(as.character) %>%
tidyr::unite('conf.interval', dplyr::matches('conf'), sep = ',') %>%
dplyr::mutate(
p.value = '.000',
conf.interval = paste0('[', .data$conf.interval, ']')
)
}) %>%
dplyr::bind_rows()
# format data to display results
var_names <- names(results)
results %>%
t() %>%
as.data.frame() %>%
tibble::tibble() %>%
dplyr::mutate(var = var_names) %>%
dplyr::select(Statistic = var, Mean = V1, Median = V2)
results %>%
t() %>%
as.data.frame() %>%
tibble::tibble() %>%
dplyr::mutate(var = var_names) %>%
dplyr::select(Statistic = var, Mean = V1, Median = V2) %>%
{.[c(3, 1:2, 7, 4:5),]}
results %>%
t() %>%
as.data.frame() %>%
tibble::tibble() %>%
dplyr::mutate(var = var_names) %>%
dplyr::select(Statistic = var, Mean = V1, Median = V2) %>%
{.[c(1:3, 7, 4:5),]}
results %>%
t() %>%
as.data.frame() %>%
tibble::tibble() %>%
dplyr::mutate(var = var_names) %>%
dplyr::select(Statistic = var, Mean = V1, Median = V2) %>%
{.[c(2:3, 1, 7, 4:5),]}
table <- results %>%
t() %>%
as.data.frame() %>%
tibble::tibble() %>%
dplyr::mutate(var = var_names) %>%
dplyr::select(Statistic = var, Mean = V1, Median = V2) %>%
{.[c(2:3, 1, 7, 4:5),]}
table$Statistics = C(
'Mean of Group Below Population Threshold',
'Mean of Group Above Population Threshold',
'Difference in Means',
'Confidence Interval',
't-statistic',
'p-value',
)
table$Statistic = C(
'Mean of Group Below Population Threshold',
'Mean of Group Above Population Threshold',
'Difference in Means',
'Confidence Interval',
't-statistic',
'p-value',
)
table <- results %>%
t() %>%
as.data.frame() %>%
tibble::tibble() %>%
dplyr::mutate(var = var_names) %>%
dplyr::select(Statistic = var, Mean = V1, Median = V2) %>%
{.[c(2:3, 1, 7, 4:5),]}
table$Statistic = c(
'Mean of Group Below Population Threshold',
'Mean of Group Above Population Threshold',
'Difference in Means',
'Confidence Interval',
't-statistic',
'p-value',
)
table$Statistic = c(
'Mean of Group Below Population Threshold',
'Mean of Group Above Population Threshold',
'Difference in Means',
'Confidence Interval',
't-statistic',
'p-value'
)
knitr::kable(table)
knitr::kable(table %>% dplyr::mutate(Statistic = str_wrap(Statistic, 10)))
knitr::kable(table %>% dplyr::mutate(Statistic = stringr::str_wrap(Statistic, 10)))
nccourts_ttests
nccourts_ttests %>%
dplyr::filter(category == 'Criminal')
nccourts_ttests %>%
dplyr::filter(category == 'Criminal') %$%
lm(number_of_cases ~ population)
nccourts_ttests %>%
dplyr::filter(category == 'Criminal') %$%
lm(number_of_cases ~ population) %>%
summary()
nccourts_ttests %>%
dplyr::filter(category == 'Criminal') %$%
lm(number_of_cases ~ population + above_mean) %>%
summary()
nccourts_ttests %>%
dplyr::filter(category == 'Criminal') %$%
lm(ln_number_of_cases ~ population) %>%
summary()
nccourts_ttests %>%
dplyr::filter(category == 'Criminal') %$%
lm(number_of_cases ~ log(population)) %>%
summary()
nccourts_ttests %>% glimpse()
nccourts_ttests %>% dplyr::glimpse()
nccourts_ttests %>% dplyr::glimpse()
nccourts_ttests %>%
dplyr::filter(category == 'Criminal') %$%
lm(case_type ~ population) %>%
summary()
nccourts_ttests %>%
dplyr::filter(category == 'Criminal') %$%
lm(number_of_cases ~ log(population)) %>%
summary()
p <- ggplot2::ggplot(dplyr::filter(nccourts_ttests, category == 'Criminal'))
p +
geom_smooth(method = 'lm', formula = number_of_cases ~ log(population))
p <- ggplot2::ggplot(dplyr::filter(nccourts_ttests, category == 'Criminal'))
p +
ggplot2::geom_smooth(
aes(x = population, y = number_of_cases),
method = 'lm', formula = number_of_cases ~ log(population)
)
p <- ggplot2::ggplot(dplyr::filter(nccourts_ttests, category == 'Criminal'))
p +
ggplot2::geom_smooth(
ggplot2::aes(x = population, y = number_of_cases),
method = 'lm', formula = number_of_cases ~ log(population)
)
p <- ggplot2::ggplot(
dplyr::filter(nccourts_ttests, category == 'Criminal'),
ggplot2::aes(x = population, y = number_of_cases)
)
p +
ggplot2::geom_smooth(
method = 'lm', formula = number_of_cases ~ log(population)
)
nccourts_ttests
p +
ggplot2::geom_smooth(
method = 'lm', formula = y ~ log(x)
)
p +
ggplot2::geom_smooth(method = 'lm', formula = y ~ log(x)) +
ggplot2::scale_x_continuous(
labels = function(x){ifelse(x > 0,paste(x / 1e6, 'million'), 0)}
)
p +
ggplot2::geom_smooth(method = 'lm', formula = y ~ log(x)) +
ggplot2::scale_x_continuous(
labels = function(x){ifelse(x > 0,paste(x / 1e3, 'k'), 0)}
)
p +
ggplot2::geom_smooth(method = 'lm', formula = y ~ log(x)) +
ggplot2::scale_x_continuous(
labels = function(x){ifelse(x > 0,paste(x / 1e3, 'k'), 0)}
) +
ggplot2::labs(
x = 'County Population (in thousand residents)',
y = 'Number of Criminal Cases'
)
p +
ggplot2::geom_smooth(method = 'lm', formula = y ~ log(x)) +
ggplot2::scale_x_continuous(
labels = function(x){ifelse(x > 0,paste(x / 1e3, 'k'), 0)}
) +
ggplot2::labs(
x = 'County Population (in thousand residents)',
y = 'Number of Criminal Cases'
) +
ggplot2::theme_minimal() +
ggplot2::theme(
panel.grid.minor.y = ggplot2::element_blank(),
# panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank(),
axis.text.x        = ggplot2::element_text(size = 10)
)
p +
ggplot2::geom_smooth(method = 'lm', formula = y ~ log(x)) +
ggplot2::geom_point()
p +
ggplot2::geom_smooth(method = 'lm', formula = y ~ log(x)) +
ggplot2::geom_point()
ggplot2::scale_x_continuous(
labels = function(x){ifelse(x > 0,paste(x / 1e3, 'k'), 0)}
)
nccourts_ttests %$%
lm(number_of_cases ~ log(population))
reg <- nccourts_ttests %$%
lm(number_of_cases ~ log(population)) %>%
summary()
reg
nccourts_ttests %$%
lm(number_of_cases ~ population + population*population) %>%
summary()
nccourts_ttests %$%
lm(number_of_cases ~ population + population*population)
nccourts_ttests %$%
lm(number_of_cases ~ population + (population*population)) %>%
summary()
reg <- nccourts_ttests %$%
lm(number_of_cases ~ log(population)) %>%
summary()
rm(list = ls())
savedir = './
'
savedir = './'
devtools::document()
devtools::check()
usethis::use_package('stats')
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
CJIL::data_download()
??CJIL::data_download
?CJIL::data_download
?CJIL::data_process
?CJIL::data_analyze
devtools::document()
devtools::check()
devtools::check()
CJIL::data_download('data.rds.xz')
CJIL::data_download('data.rds.xz')
CJIL::data_process()
CJIL::data_analyze()
savedir = './'
# load data from package if not set by user
if (is.null(datapath)){nccourts <- CJIL::data}
# create new dataset to check evolution of criminal cases over time
nccourts_flat <- nccourts %>%
dplyr::filter(.data$category == 'Criminal') %>%
dplyr::group_by(.data$period, .data$case_type) %>%
dplyr::summarize(
total    = sum(.data$number_of_cases),
ln_total = log(sum(.data$number_of_cases))
) %>%
dplyr::ungroup(.data$case_type) %>%
dplyr::mutate(perc = (.data$total / sum(.data$total)) * 100)
# check case type evolution over time
p <- nccourts_flat %>%
ggplot2::ggplot(
ggplot2::aes(
x     = .data$period,
y     = .data$total,
group = .data$case_type
)
) +
ggplot2::geom_bar(
ggplot2::aes(fill = .data$case_type),
stat  = 'identity',
color = 'black',
size  = .3
) +
ggplot2::scale_y_continuous(
labels = function(x){ifelse(x > 0,paste(x / 1e6, 'million'), 0)}
) +
ggplot2::scale_fill_brewer(
ggplot2::aes(fill = .data$case_type), palette = 'RdPu'
) +
ggplot2::labs(
x = ggplot2::element_blank(), y = ggplot2::element_blank()
) +
ggplot2::theme_minimal() +
ggplot2::theme(
panel.grid.minor.y = ggplot2::element_blank(),
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank(),
axis.text.x        = ggplot2::element_text(angle = 90, size = 10),
legend.position    = 'top',
legend.title       = ggplot2::element_blank()
)
# save plot
ggplot2::ggsave(
filename = paste0(savedir, 'evolution_criminal_cases.pdf'),
plot     = p,
width    = 8,
height   = 5,
device   = grDevices::cairo_pdf
)
datapath = NULL, savedir = './'
# load data from package if not set by user
if (is.null(datapath)){nccourts <- CJIL::data}
# create new dataset to check evolution of criminal cases over time
nccourts_flat <- nccourts %>%
dplyr::filter(.data$category == 'Criminal') %>%
dplyr::group_by(.data$period, .data$case_type) %>%
dplyr::summarize(
total    = sum(.data$number_of_cases),
ln_total = log(sum(.data$number_of_cases))
) %>%
dplyr::ungroup(.data$case_type) %>%
dplyr::mutate(perc = (.data$total / sum(.data$total)) * 100)
datapath = NULL
savedir = './'
# load data from package if not set by user
if (is.null(datapath)){nccourts <- CJIL::data}
# create new dataset to check evolution of criminal cases over time
nccourts_flat <- nccourts %>%
dplyr::filter(.data$category == 'Criminal') %>%
dplyr::group_by(.data$period, .data$case_type) %>%
dplyr::summarize(
total    = sum(.data$number_of_cases),
ln_total = log(sum(.data$number_of_cases))
) %>%
dplyr::ungroup(.data$case_type) %>%
dplyr::mutate(perc = (.data$total / sum(.data$total)) * 100)
# check case type evolution over time
p <- nccourts_flat %>%
ggplot2::ggplot(
ggplot2::aes(
x     = .data$period,
y     = .data$total,
group = .data$case_type
)
) +
ggplot2::geom_bar(
ggplot2::aes(fill = .data$case_type),
stat  = 'identity',
color = 'black',
size  = .3
) +
ggplot2::scale_y_continuous(
labels = function(x){ifelse(x > 0,paste(x / 1e6, 'million'), 0)}
) +
ggplot2::scale_fill_brewer(
ggplot2::aes(fill = .data$case_type), palette = 'RdPu'
) +
ggplot2::labs(
x = ggplot2::element_blank(), y = ggplot2::element_blank()
) +
ggplot2::theme_minimal() +
ggplot2::theme(
panel.grid.minor.y = ggplot2::element_blank(),
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank(),
axis.text.x        = ggplot2::element_text(angle = 90, size = 10),
legend.position    = 'top',
legend.title       = ggplot2::element_blank()
)
# save plot
ggplot2::ggsave(
filename = paste0(savedir, 'evolution_criminal_cases.pdf'),
plot     = p,
width    = 8,
height   = 5,
device   = grDevices::cairo_pdf
)
# define global mean population
population_mean   <- mean(nccourts$population)
population_median <- stats::median(nccourts$population)
# is the distribution of cases similar across counties above and below the
# mean and the median?
nccourts_ttests <- nccourts %>%
dplyr::mutate(
above_mean   = ifelse(.data$population - population_mean > 0, 1, 0),
above_median = ifelse(.data$population - population_median > 0, 1, 0)
)
# filter criminal cases
ttests <- nccourts_ttests %>% dplyr::filter(.data$category == 'Criminal')
# execute t-tests
test_a <- stats::t.test(number_of_cases ~ above_mean, data = ttests)
test_b <- stats::t.test(number_of_cases ~ above_median, data = ttests)
# create two tables containing the information from the t-tests
results <- list(test_a, test_b) %>%
lapply(function(x){
x %>%
broom::tidy() %>%
dplyr::select(-dplyr::matches('method|alternative')) %>%
dplyr::mutate(p.value = round(.data$p.value, 3)) %>%
dplyr::mutate_all(as.integer) %>%
dplyr::mutate_all(as.character) %>%
tidyr::unite('conf.interval', dplyr::matches('conf'), sep = ',') %>%
dplyr::mutate(
p.value = '.000',
conf.interval = paste0('[', .data$conf.interval, ']')
)
}) %>%
dplyr::bind_rows()
# format data to display results
var_names <- names(results)
results %>%
t() %>%
as.data.frame() %>%
tibble::tibble() %>%
dplyr::mutate(var = var_names) %>%
dplyr::select(Statistic = .data$var, Mean = .data$V1, Median = .data$V2)
results %>%
t() %>%
as.data.frame() %>%
tibble::tibble() %>%
dplyr::mutate(var = var_names) %>%
dplyr::select(Statistic = .data$var, Mean = .data$V1, Median = .data$V2) %>%
{.data[c(2:3, 1, 7, 4:5),]}
results %>%
t() %>%
as.data.frame() %>%
tibble::tibble() %>%
dplyr::mutate(var = var_names) %>%
dplyr::select(Statistic = .data$var, Mean = .data$V1, Median = .data$V2) %>%
dplyr::slice(6)
results %>%
t() %>%
as.data.frame() %>%
tibble::tibble() %>%
dplyr::mutate(var = var_names) %>%
dplyr::select(Statistic = .data$var, Mean = .data$V1, Median = .data$V2) %>%
dplyr::slice(-6)
results %>%
t() %>%
as.data.frame() %>%
tibble::tibble() %>%
dplyr::mutate(var = var_names) %>%
dplyr::select(Statistic = .data$var, Mean = .data$V1, Median = .data$V2) %>%
dplyr::slice(-6) %>%
{.data[c(2:3, 1, 6, 4:5),]}
table <- results %>%
t() %>%
as.data.frame() %>%
tibble::tibble() %>%
dplyr::mutate(var = var_names) %>%
dplyr::select(Statistic = .data$var, Mean = .data$V1, Median = .data$V2) %>%
dplyr::slice(-6) %>%
table <- results %>%
t() %>%
as.data.frame() %>%
tibble::tibble() %>%
dplyr::mutate(var = var_names) %>%
dplyr::select(Statistic = .data$var, Mean = .data$V1, Median = .data$V2) %>%
dplyr::slice(-6)
table[c(2:3, 1, 6, 4:5),]
table <- table[c(2:3, 1, 6, 4:5),]
table$Statistic = c(
'Mean of Group Below Population Threshold',
'Mean of Group Above Population Threshold',
'Difference in Means',
'Confidence Interval',
't-statistic',
'p-value'
)
# run regression for the analysis between the relationship between population
# and number of criminal cases
reg <- stats::lm(
.data$number_of_cases ~ .data$log(population), data = nccourts_ttests
) %>%
summary()
# plot regression chart on
p <- ggplot2::ggplot(
dplyr::filter(nccourts_ttests, .data$category == 'Criminal'),
ggplot2::aes(x = .data$population, y = .data$number_of_cases)
)
p <- p +
ggplot2::geom_smooth(method = 'lm', formula = y ~ log(x)) +
ggplot2::scale_x_continuous(
labels = function(x){ifelse(x > 0,paste(x / 1e3, 'k'), 0)}
) +
ggplot2::labs(
x = 'County Population (in thousand residents)',
y = 'Number of Criminal Cases'
) +
ggplot2::theme_minimal() +
ggplot2::theme(
panel.grid.minor.y = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank(),
axis.text.x        = ggplot2::element_text(size = 10)
)
# save plot
ggplot2::ggsave(
filename = paste0(savedir, 'regression.pdf'),
plot     = p,
width    = 8,
height   = 5,
device   = grDevices::cairo_pdf
)
devtools::document()
CJIL::data_analyze()
devtools::document()
CJIL::data_analyze()
devtools::check()
devtools::document()
CJIL::data_analyze()
CJIL::data_analyze()
q
q
q
